theme_linedraw(base_size = 6, base_family = "Avenir") +
geom_hline(yintercept = 0, lty = "dashed") +
scale_y_continuous(name = "Slope", position = "right", labels = scales::number_format(accuracy = 0.1), breaks = scales::pretty_breaks(n = 2)) +
scale_x_continuous(name = "...", breaks = c(1), labels = c("A"), limits = c(0.5, 1.5)) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_text(colour = "white"),
axis.text.x = element_text(colour = "white"))
#return plot
return(cowplot::plot_grid(plot, effects_plot, rel_widths = c(1, effects_panel)))
}
#function for comparing the strength of menzerath's law in mysticetes and odonticetes, and between duration and interval data
#data should be a nested list, where top levels are species, and second levels are individual studies (if applicable)
#group should be a vector of 0/1, 0 for mysticetes and 1 for odontocetes
#type should be a vector of 0/1, 0 for duration and 1 for interval
menz_compare <- function(data, group, type, rm_singles = TRUE, cores = 7){
#combine datasets
data <- do.call(rbind, parallel::mclapply(1:length(data), function(x){
#store temporary version of data to modify
temp <- data[[x]]
#if there are multiple studies
if(!is.data.frame(temp)){
#iterate through them and add measures
temp <- do.call(rbind, lapply(1:length(temp), function(y){
#add sequence length to the original data
temp[[y]]$length <- sapply(1:nrow(temp[[y]]), function(z){length(which(temp[[y]]$sequence == temp[[y]]$sequence[z]))})
#and add study as a variable
return(cbind(temp[[y]], study = y, species = x, group = group[x], type = type[x]))
}))
#if there are any non-sequences (length less than 2) remove them
if(rm_singles & length(which(temp$length < 2)) > 0){temp <- temp[-which(temp$length < 2), ]}
#and concatenate what needs to be concatenated
temp$study <- paste0(temp$species, "-", temp$study)
temp$sequence <- paste0(temp$study, "-", temp$sequence)
#and add position
temp$position <- scale(unlist(lapply(unique(temp$sequence), function(x){
#compute position using (n - 1)/(l - 1), as per james et al. (2021)
seq_length <- length(which(temp$sequence == x))
return((c(1:seq_length) - 1)/(seq_length - 1))
})))
#log transform and scale duration and length
temp$duration <- scale(log(temp$duration))
temp$length <- scale(log(temp$length))
} else{
#add sequence length to the original data
temp$length <- sapply(1:nrow(temp), function(y){length(which(temp$sequence == temp$sequence[y]))})
#if there are any non-sequences (length less than 2) remove them
if(rm_singles & length(which(temp$length < 2)) > 0){temp <- temp[-which(temp$length < 2), ]}
#add study, group, and type
temp$study <- 1
temp$species <- x
temp$group <- group[x]
temp$type <- type[x]
#and concatenate what needs to be concatenated
temp$study <- paste0(temp$species, "-", temp$study)
temp$sequence <- paste0(temp$study, "-", temp$sequence)
#and add scaled position
temp$position <- scale(unlist(lapply(unique(temp$sequence), function(x){
#compute position using (n - 1)/(l - 1), as per james et al. (2021)
seq_length <- length(which(temp$sequence == x))
return((c(1:seq_length) - 1)/(seq_length - 1))
})))
#log transform and scale duration and length
temp$duration <- scale(log(temp$duration))
temp$length <- scale(log(temp$length))
}
#and return
return(temp)
}, mc.cores = cores))
#run base model and model with position
base_model <- lmer(duration ~ length + length:group + length:type + (1|sequence) + (1|study), data = data, REML = FALSE, control = lmerControl(optimizer = "bobyqa"))
position_model <- model <- lmer(duration ~ length + position + length:group + length:type + position:group + position:type + (1|sequence) + (1|study), data = data, REML = FALSE, control = lmerControl(optimizer = "bobyqa"))
#return model
return(list(base = base_model, position = position_model))
}
#read human phonemic data from the doreco dataset
read_phonemes <- function(path, interpolate = FALSE){
#read in and format csv file
data <- read.csv(path, header = FALSE)
if(length(which(is.na(data[1, ]))) > 0){
data <- data[, 1:(min(which(is.na(data[1, ]))) - 1)]
}
colnames(data) <- data[1, ]
data <- data[-1, ]
data$duration <- as.numeric(data$end) - as.numeric(data$start)
#remove exceptional speech events, such as pauses, singing, and disfluencies: https://doreco.huma-num.fr/HowTo
data <- data[-which(data$ph %in% c("<<fp>>", "<<fs>>", "<<pr>>", "<<fm>>", "<<sg>>", "<<bc>>", "<<id>>", "<<on>>", "<<wip>>", "<<ui>>", "<p:>")), ]
#if interpolation of raw durations with median durations of phonemes is desired (to assess robustness of interpolation of humpback data)
if(interpolate){
#get unique phonemes
unique_phonemes <- data.frame(phoneme = unique(data$ph))
#for each unique phoneme
unique_phonemes$med_dur <- sapply(unique_phonemes$phoneme, function(x){
#get the word IDs corresponding to that word
unique_ids <- unique(data$ph_ID[which(data$ph == x)])
#return the median duration across all tokens of that word
return(median(sapply(unique_ids, function(y){sum(data$duration[which(data$ph_ID == y)])})))
})
#replace real durations with median durations of types
data$duration <- unlist(parallel::mclapply(data$ph, function(x){unique_phonemes$med_dur[which(unique_phonemes$phoneme == x)]}, mc.cores = 7))
}
#phonemes within words
word_level <- data[, match(c("duration", "wd_ID"), colnames(data))]
colnames(word_level) <- c("duration", "sequence")
word_level$sequence <- as.numeric(factor(word_level$sequence))
#words within sentences
inds <- rle(data$tx)
inds_end <- cumsum(inds$lengths)
inds_start <- c(1, lag(inds_end)[-1] + 1)
sentence_level <- do.call(rbind, lapply(1:length(inds_end), function(x){
temp <- data[inds_start[x]:inds_end[x], ]
data.frame(duration = aggregate(duration ~ wd_ID, temp, sum)$duration, sequence = x)
}))
#return both
return(list(words = word_level, sentences = sentence_level))
}
#extract effects from models
extract_freq_effects <- function(models){
#get vector of L95%, M, and H95% for prod null (reduced version)
prod_null_est <- summary(models$prod_null$reduced_scaled, conf.int = TRUE)
prod_null_est <- as.numeric(prod_null_est[which(prod_null_est$term == "scale(log(length))"), c(7, 2, 8)])
#get vector of L95%, M, and H95% for length
length_est <- summary(models$actual$reduced_scaled)$coef
length_est <- length_est[which(rownames(length_est) == "scale(log(length))"), 1]
length_est <- as.numeric(c(length_est, c(confint(models$actual$reduced_scaled, parm = "scale(log(length))", method = "Wald"))))
length_est <- length_est[c(2, 1, 3)]
#get vector of L95%, M, and H95% for position
position_est <- summary(models$actual$position_scaled)$coef
position_est <- position_est[which(rownames(position_est) == "scale(position)"), 1]
position_est <- as.numeric(c(position_est, c(confint(models$actual$position_scaled, parm = "scale(position)", method = "Wald"))))
position_est <- position_est[c(2, 1, 3)]
#return both
return(list(length = length_est, position = position_est, prod_null = prod_null_est))
}
#create label for phylogeny plots
label_maker <- function(data, rm_singles = TRUE, intervals = FALSE){
#store boolean of whether data are from multiple studies
multiple_studies <- !is.data.frame(data)
#set number of studies to zero by default
n_studies <- 1
#if multiple studies are in the data
if(multiple_studies){
#store actual number of studies
n_studies <- length(data)
#collapse data
data <- data.frame(duration = unlist(lapply(1:length(data), function(x){data[[x]]$duration})),
sequence = unlist(lapply(1:length(data), function(x){paste0(x, "-", data[[x]]$sequence)})))
}
#otherwise just add length as a variable
temp <- aggregate(. ~ sequence, data, FUN = length)
data$length <- temp[, 2][match(data$sequence, temp$sequence)]
#if there are any non-sequences (length less than 2) remove them
if(rm_singles & length(which(data$length < 2)) > 0){data <- data[-which(data$length < 2), ]}
#create text label
return(paste0(formatC(nrow(data), big.mark = ","), " ", ifelse(intervals, "Intervals", "Elements"), "\n",
formatC(length(unique(data$sequence)), big.mark = ","), " ", "Sequences", "\n",
n_studies, " ", ifelse(multiple_studies, "Studies", "Study")))
}
#create function for extracting model effects and confidence intervals
table_output <- function(model, w_position = FALSE, zla = FALSE){
#prod_null_all <- as.numeric(summary(model$prod_null$reduced_scaled, conf.int = TRUE, method = "Wald")[2, c(2, 7, 8)])
if(!zla){
if(w_position){
length_effect <- summary(model$actual$position_scaled)$coefficients[2, 1]
length_confints <- as.numeric(confint(model$actual$position_scaled, parm = "scale(log(length))", method = "Wald"))
position_effect <- summary(model$actual$position_scaled)$coefficients[3, 1]
position_confints <- as.numeric(confint(model$actual$position_scaled, parm = "scale(position)", method = "Wald"))
output <- c(length_effect, length_confints, position_effect, position_confints)
} else{
length_effect <- summary(model$actual$reduced_scaled)$coefficients[2, 1]
length_confints <- as.numeric(confint(model$actual$reduced_scaled, parm = "scale(log(length))", method = "Wald"))
output <- c(length_effect, length_confints)
}
}
if(zla){
effect <- summary(model)$coefficients[2, 1]
confints <- confint(model, parm = "count", method = "Wald")
output <- c(effect, confints)
}
return(output)
}
#fit zla models
zla_fit <- function(data){
#if data are from multiple studies, combine them (scaling within studies to enable comparison despite different sample sizes)
if(!is.data.frame(data)){
data <- do.call(rbind, lapply(1:length(data), function(x){
data[[x]]$count <- scale(sapply(1:nrow(data[[x]]), function(y){length(which(data[[x]]$type == data[[x]]$type[y]))}))
data[[x]]$study <- x
data[[x]]
}))
lme4::lmer(scale(log(duration)) ~ count + (1|type) + (1|study), data = data, REML = FALSE, control = lme4::lmerControl(optimizer = "bobyqa"))
} else{
#otherwise run normally
data$count <- scale(sapply(1:nrow(data), function(x){length(which(data$type == data$type[x]))}))
lme4::lmer(scale(log(duration)) ~ count + (1|type), data = data, REML = FALSE, control = lme4::lmerControl(optimizer = "bobyqa"))
}
}
#function for creating zla plot
zla_plot <- function(data, model, color = "black", aggregated = TRUE, alpha = 1, effects_panel = 0.2, effects_breaks = 3, ylims = NULL){
#structure data for plotting
if(!is.data.frame(data)){
data <- do.call(rbind, lapply(1:length(data), function(x){
data[[x]]$raw_count <- sapply(1:nrow(data[[x]]), function(y){length(which(data[[x]]$type == data[[x]]$type[y]))})
data[[x]]$count <- scale(sapply(1:nrow(data[[x]]), function(y){length(which(data[[x]]$type == data[[x]]$type[y]))}))
data[[x]]$study <- x
data[[x]]
}))
} else{
data$raw_count <- sapply(1:nrow(data), function(x){length(which(data$type == data$type[x]))})
data$count <- scale(sapply(1:nrow(data), function(x){length(which(data$type == data$type[x]))}))
}
#get intercept and effects for best fit line
intercept <- summary(model)$coef[1, 1]
effect <- summary(model)$coef[2, 1]
#get original scaling from data
og_scaled_y <- scale(log(data$duration))
#function that predicts durations from lengths, based on intercepts, effects, and means and sds from scaling
pred_durations <- function(intercept, effect, count, mean_log_dur, sd_log_dur){
return(exp((intercept + effect*count)*sd_log_dur + mean_log_dur))
}
#compute best fit line for plotting
best_fit_data <- data.frame(x = seq(from = min(data$count), to = max(data$count), length.out = 1000))
best_fit_data$y <- pred_durations(intercept, effect, count = best_fit_data$x,
mean_log_dur = attr(og_scaled_y, "scaled:center"), sd_log_dur = attr(og_scaled_y, "scaled:scale"))
best_fit_data$x <- seq(from = min(data$raw_count), to = max(data$raw_count), length.out = 1000)
#construct plot, aggregating durations into types to match menzerath plot
#with option to specify custom xlim
if(aggregated){data <- aggregate(duration ~ type + raw_count, data, mean)}
if(is.null(ylims)){
plot <- ggplot(data, aes(x = raw_count, y = duration)) +
geom_point(colour = scales::alpha(color, alpha), size = 1, stroke = 0) +
geom_line(data = best_fit_data, aes(x = x, y = y), colour = "black", linewidth = 0.5) +
theme_linedraw(base_size = 6, base_family = "Avenir") +
xlab("Count") + ylab("Mean ED (s)") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 2)) +
theme(axis.text.y = element_text(angle = 90))
} else{
plot <- ggplot(data, aes(x = raw_count, y = duration)) +
geom_point(colour = scales::alpha(color, alpha), size = 1, stroke = 0) +
geom_line(data = best_fit_data, aes(x = x, y = y), colour = "black", linewidth = 0.5) +
theme_linedraw(base_size = 6, base_family = "Avenir") +
xlab("Count") + ylab("Mean ED (s)") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 2), limits = c(ylims[1], ylims[2])) +
theme(axis.text.y = element_text(angle = 90))
}
#get bounds of confidence interval
bounds <- confint(model, parm = "count", method = "Wald")
#construct effects plot
effects_plot <- ggplot() +
geom_point(aes(x = 1, y = summary(model)$coef[2, 1]), size = 1.5, stroke = 0, colour = scales::alpha(color, alpha)) +
geom_linerange(aes(x = 1, ymin = bounds[1], ymax = bounds[2]), colour = scales::alpha(color, alpha)) +
theme_linedraw(base_size = 6, base_family = "Avenir") +
geom_hline(yintercept = 0, lty = "dashed") +
scale_y_continuous(name = "Slope", position = "right", labels = scales::number_format(accuracy = 0.1), breaks = scales::pretty_breaks(n = effects_breaks)) +
scale_x_continuous(name = "...", breaks = c(1), labels = c("A"), limits = c(0.5, 1.5)) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_text(colour = "white"),
axis.text.x = element_text(colour = "white"))
#return plot
return(cowplot::plot_grid(plot, effects_plot, rel_widths = c(1, effects_panel)))
}
#create label for phylogeny plots
zla_label_maker <- function(data){
#store boolean of whether data are from multiple studies
multiple_studies <- !is.data.frame(data)
#set number of studies to zero by default
n_studies <- 1
#if multiple studies are in the data
if(multiple_studies){
#store actual number of studies
n_studies <- length(data)
#collapse data
data <- data.frame(type = unlist(lapply(1:length(data), function(x){paste0(x, "-", data[[x]]$type)})),
duration = unlist(lapply(1:length(data), function(x){data[[x]]$duration})))
}
#create text label
return(paste0(formatC(nrow(data), big.mark = ","), " Elements", "\n",
formatC(length(unique(data$type)), big.mark = ","), " ", "Types", "\n",
n_studies, " ", ifelse(multiple_studies, "Studies", "Study")))
}
#read human phonemic data from the doreco dataset for zla
zla_read_phonemes <- function(path){
#read in and format csv file
data <- read.csv(path, header = FALSE)
if(length(which(is.na(data[1, ]))) > 0){
data <- data[, 1:(min(which(is.na(data[1, ]))) - 1)]
}
colnames(data) <- data[1, ]
data <- data[-1, ]
data$duration <- as.numeric(data$end) - as.numeric(data$start)
#remove exceptional speech events, such as pauses, singing, and disfluencies: https://doreco.huma-num.fr/HowTo
data <- data[-which(data$ph %in% c("<<fp>>", "<<fs>>", "<<pr>>", "<<fm>>", "<<sg>>", "<<bc>>", "<<id>>", "<<on>>", "<<wip>>", "<<ui>>", "<p:>")), ]
#phonemes
phonemes_zla <- data.frame(type = data$ph, duration = data$duration)
#words
words_zla <- aggregate(duration ~ wd_ID, data, sum)
words_zla$wd <- data$wd[match(words_zla$wd_ID, data$wd_ID)]
words_zla <- data.frame(type = words_zla$wd, duration = words_zla$duration)
#return both
return(list(phonemes = phonemes_zla, words = words_zla))
}
#load libraries and data
library(ggtree)
cetaceans <- ape::read.tree("data/phylo_lloyd_2021.tre")
#create table of tips
zla_tips <- data.frame(scientific = c("Megaptera_novaeangliae", #humpback
"Balaenoptera_musculus", #blue
"Balaena_mysticetus", #bowhead
"Orcinus_orca", #killer
"Balaenoptera_borealis"), #sei whale
common = c("Humpback Whale\n(Megaptera novaeangliae)",
"Blue Whale\n(Balaenoptera musculus)",
"Bowhead Whale\n(Balaena mysticetus)",
"Killer Whale\n(Orcinus orca)",
"Sei Whale\n(Balaenoptera borealis)"),
img = c("humpback", "blue", "bowhead", "killer", "sei"))
#subset the original phylogeny to only include the relevant species
cetaceans <- ape::keep.tip(cetaceans, zla_tips$scientific)
#match up the tip labels with the image files
cetaceans$tip.label <- zla_tips$common[match(cetaceans$tip.label, zla_tips$scientific)]
cetaceans$file <- paste0("imgs/", zla_tips$img[match(cetaceans$tip.label, zla_tips$common)], ".svg")
#construct un-annotated phylogeny plot for cetaceans
#colors in following order to match myst plot: blue, bowhead, humpback, killer, sei
zla_phylo_plot <- ggtree(cetaceans, branch.length = "none", layout = "roundrect")
zla_phylo_plot$data$file <- c(cetaceans$file, rep(NA, nrow(zla_phylo_plot$data) - nrow(zla_tips)))
zla_phylo_plot <- zla_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 9, size = 0.1, align = TRUE) + xlim(NA, 13.5) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = c("#7C702C", "#67A339", "#5EBF7A", "#C79249", "#A34CA2")) + theme(legend.position = "none") + ylim(0.5, nrow(zla_tips))
#create plot labels
zla_labels <- c(zla_label_maker(killer_data),
zla_label_maker(bowhead_data),
zla_label_maker(humpback_data),
zla_label_maker(sei_data),
zla_label_maker(blue_data))
#load datasets
files <- list.files("data/processed_menz/")[grep(".RData", list.files("data/processed_menz/"))]
for(i in 1:length(files)){load(paste0("data/processed_menz/", files[i]))}
#load fitted models
files <- list.files("models/")[grep(".RData", list.files("models/"))]
for(i in 1:length(files)){load(paste0("models/", files[i]))}
#load libraries and data
library(ggtree)
cetaceans <- ape::read.tree("data/phylo_lloyd_2021.tre")
#create table of tips
zla_tips <- data.frame(scientific = c("Megaptera_novaeangliae", #humpback
"Balaenoptera_musculus", #blue
"Balaena_mysticetus", #bowhead
"Orcinus_orca", #killer
"Balaenoptera_borealis"), #sei whale
common = c("Humpback Whale\n(Megaptera novaeangliae)",
"Blue Whale\n(Balaenoptera musculus)",
"Bowhead Whale\n(Balaena mysticetus)",
"Killer Whale\n(Orcinus orca)",
"Sei Whale\n(Balaenoptera borealis)"),
img = c("humpback", "blue", "bowhead", "killer", "sei"))
#subset the original phylogeny to only include the relevant species
cetaceans <- ape::keep.tip(cetaceans, zla_tips$scientific)
#match up the tip labels with the image files
cetaceans$tip.label <- zla_tips$common[match(cetaceans$tip.label, zla_tips$scientific)]
cetaceans$file <- paste0("imgs/", zla_tips$img[match(cetaceans$tip.label, zla_tips$common)], ".svg")
#construct un-annotated phylogeny plot for cetaceans
#colors in following order to match myst plot: blue, bowhead, humpback, killer, sei
zla_phylo_plot <- ggtree(cetaceans, branch.length = "none", layout = "roundrect")
zla_phylo_plot$data$file <- c(cetaceans$file, rep(NA, nrow(zla_phylo_plot$data) - nrow(zla_tips)))
zla_phylo_plot <- zla_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 9, size = 0.1, align = TRUE) + xlim(NA, 13.5) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = c("#7C702C", "#67A339", "#5EBF7A", "#C79249", "#A34CA2")) + theme(legend.position = "none") + ylim(0.5, nrow(zla_tips))
#create plot labels
zla_labels <- c(zla_label_maker(killer_data),
zla_label_maker(bowhead_data),
zla_label_maker(humpback_data),
zla_label_maker(sei_data),
zla_label_maker(blue_data))
killer_data
bowhead_data
humpback_data
sei_data
#load files for zla models
files <- list.files("data/processed_zla/")[grep(".RData", list.files("data/processed_zla/"))]
for(i in 1:length(files)){load(paste0("data/processed_zla/", files[i]))}
#load libraries and data
library(ggtree)
cetaceans <- ape::read.tree("data/phylo_lloyd_2021.tre")
#create table of tips
zla_tips <- data.frame(scientific = c("Megaptera_novaeangliae", #humpback
"Balaenoptera_musculus", #blue
"Balaena_mysticetus", #bowhead
"Orcinus_orca", #killer
"Balaenoptera_borealis"), #sei whale
common = c("Humpback Whale\n(Megaptera novaeangliae)",
"Blue Whale\n(Balaenoptera musculus)",
"Bowhead Whale\n(Balaena mysticetus)",
"Killer Whale\n(Orcinus orca)",
"Sei Whale\n(Balaenoptera borealis)"),
img = c("humpback", "blue", "bowhead", "killer", "sei"))
#subset the original phylogeny to only include the relevant species
cetaceans <- ape::keep.tip(cetaceans, zla_tips$scientific)
#match up the tip labels with the image files
cetaceans$tip.label <- zla_tips$common[match(cetaceans$tip.label, zla_tips$scientific)]
cetaceans$file <- paste0("imgs/", zla_tips$img[match(cetaceans$tip.label, zla_tips$common)], ".svg")
#construct un-annotated phylogeny plot for cetaceans
#colors in following order to match myst plot: blue, bowhead, humpback, killer, sei
zla_phylo_plot <- ggtree(cetaceans, branch.length = "none", layout = "roundrect")
zla_phylo_plot$data$file <- c(cetaceans$file, rep(NA, nrow(zla_phylo_plot$data) - nrow(zla_tips)))
zla_phylo_plot <- zla_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 9, size = 0.1, align = TRUE) + xlim(NA, 13.5) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = c("#7C702C", "#67A339", "#5EBF7A", "#C79249", "#A34CA2")) + theme(legend.position = "none") + ylim(0.5, nrow(zla_tips))
#create plot labels
zla_labels <- c(zla_label_maker(killer_data),
zla_label_maker(bowhead_data),
zla_label_maker(humpback_data),
zla_label_maker(sei_data),
zla_label_maker(blue_data))
#add annotations to mysticetes
zla_phylo_plot <- zla_phylo_plot + annotate("text", label = zla_labels, x = rep(max(zla_phylo_plot$data$x), length(zla_labels)), y = (1:length(zla_labels))-0.35, hjust = 0, family = "Avenir", size = 2.2, lineheight = 0.8)
#match up the colors between phylogeny and menzerath's law plots based on the labels
color_matching <- data.frame(species = c(zla_phylo_plot$data$label[-which(is.na(zla_phylo_plot$data$label))]), color_code = colors[c(as.numeric(factor(cetaceans$tip.label)))])
#load libraries and data
library(ggtree)
cetaceans <- ape::read.tree("data/phylo_lloyd_2021.tre")
#create table of tips
zla_tips <- data.frame(scientific = c("Megaptera_novaeangliae", #humpback
"Balaenoptera_musculus", #blue
"Balaena_mysticetus", #bowhead
"Orcinus_orca", #killer
"Balaenoptera_borealis"), #sei whale
common = c("Humpback Whale\n(Megaptera novaeangliae)",
"Blue Whale\n(Balaenoptera musculus)",
"Bowhead Whale\n(Balaena mysticetus)",
"Killer Whale\n(Orcinus orca)",
"Sei Whale\n(Balaenoptera borealis)"),
img = c("humpback", "blue", "bowhead", "killer", "sei"))
#subset the original phylogeny to only include the relevant species
cetaceans <- ape::keep.tip(cetaceans, zla_tips$scientific)
#match up the tip labels with the image files
cetaceans$tip.label <- zla_tips$common[match(cetaceans$tip.label, zla_tips$scientific)]
cetaceans$file <- paste0("imgs/", zla_tips$img[match(cetaceans$tip.label, zla_tips$common)], ".svg")
#construct un-annotated phylogeny plot for cetaceans
#colors in following order to match myst plot: blue, bowhead, humpback, killer, sei
zla_phylo_plot <- ggtree(cetaceans, branch.length = "none", layout = "roundrect")
zla_phylo_plot$data$file <- c(cetaceans$file, rep(NA, nrow(zla_phylo_plot$data) - nrow(zla_tips)))
zla_phylo_plot <- zla_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 9, size = 0.1, align = TRUE) + xlim(NA, 13.5) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = c("#7C702C", "#67A339", "#5EBF7A", "#C79249", "#A34CA2")) + theme(legend.position = "none") + ylim(0.5, nrow(zla_tips))
#create plot labels
zla_labels <- c(zla_label_maker(killer_data),
zla_label_maker(bowhead_data),
zla_label_maker(humpback_data),
zla_label_maker(sei_data),
zla_label_maker(blue_data))
#add annotations to mysticetes
zla_phylo_plot <- zla_phylo_plot + annotate("text", label = zla_labels, x = rep(max(zla_phylo_plot$data$x), length(zla_labels)), y = (1:length(zla_labels))-0.35, hjust = 0, family = "Avenir", size = 2.2, lineheight = 0.8)
#match up the colors between phylogeny and menzerath's law plots based on the labels
color_matching <- data.frame(species = c(zla_phylo_plot$data$label[-which(is.na(zla_phylo_plot$data$label))]), color_code = colors[c(as.numeric(factor(cetaceans$tip.label)))])
cetaceans
#load libraries and data
library(ggtree)
cetaceans <- ape::read.tree("data/phylo_lloyd_2021.tre")
#create table of tips
zla_tips <- data.frame(scientific = c("Megaptera_novaeangliae", #humpback
"Balaenoptera_musculus", #blue
"Balaena_mysticetus", #bowhead
"Orcinus_orca", #killer
"Balaenoptera_borealis"), #sei whale
common = c("Humpback Whale\n(Megaptera novaeangliae)",
"Blue Whale\n(Balaenoptera musculus)",
"Bowhead Whale\n(Balaena mysticetus)",
"Killer Whale\n(Orcinus orca)",
"Sei Whale\n(Balaenoptera borealis)"),
img = c("humpback", "blue", "bowhead", "killer", "sei"))
#subset the original phylogeny to only include the relevant species
cetaceans <- ape::keep.tip(cetaceans, zla_tips$scientific)
#match up the tip labels with the image files
cetaceans$tip.label <- zla_tips$common[match(cetaceans$tip.label, zla_tips$scientific)]
cetaceans$file <- paste0("imgs/", zla_tips$img[match(cetaceans$tip.label, zla_tips$common)], ".svg")
#construct un-annotated phylogeny plot for cetaceans
#colors in following order to match myst plot: blue, bowhead, humpback, killer, sei
zla_phylo_plot <- ggtree(cetaceans, branch.length = "none", layout = "roundrect")
zla_phylo_plot$data$file <- c(cetaceans$file, rep(NA, nrow(zla_phylo_plot$data) - nrow(zla_tips)))
zla_phylo_plot <- zla_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 9, size = 0.1, align = TRUE) + xlim(NA, 13.5) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = c("#7C702C", "#67A339", "#5EBF7A", "#C79249", "#A34CA2")) + theme(legend.position = "none") + ylim(0.5, nrow(zla_tips))
#create plot labels
zla_labels <- c(zla_label_maker(killer_data),
zla_label_maker(bowhead_data),
zla_label_maker(humpback_data),
zla_label_maker(sei_data),
zla_label_maker(blue_data))
#add annotations to mysticetes
zla_phylo_plot <- zla_phylo_plot + annotate("text", label = zla_labels, x = rep(max(zla_phylo_plot$data$x), length(zla_labels)), y = (1:length(zla_labels))-0.35, hjust = 0, family = "Avenir", size = 2.2, lineheight = 0.8)
#create zipf's law plots for each species
humpback_plot <- zla_plot(humpback_data, zla_fit(humpback_data), color = "#5EBF7A", effects_breaks = 3)
sei_plot <- zla_plot(sei_data, zla_fit(sei_data), color = "#A34CA2", effects_breaks = 3)
bowhead_plot <- zla_plot(bowhead_data, zla_fit(bowhead_data), color = "#67A339", effects_breaks = 3)
killer_plot <- zla_plot(killer_data, zla_fit(killer_data), color = "#C79249", effects_breaks = 3)
blue_plot <- zla_plot(blue_data, zla_fit(blue_data), color = "#7C702C", effects_breaks = 2, ylims = c(0, 20))
#create and save full phylogeny plot
png("plots/zla_phylo.png", width = 6, height = nrow(zla_tips), units = "in", res = 600)
#cairo_pdf("plots/zla_phylo.pdf", width = 6, height = 10, family = "avenir")
right_panel <- cowplot::plot_grid(blue_plot, sei_plot, humpback_plot, bowhead_plot, killer_plot, NULL,
ncol = 1, rel_heights = c(rep(1, nrow(zla_tips)), 0.35))
bottom_row <- cowplot::plot_grid(zla_phylo_plot, right_panel, rel_widths = c(1, 1))
bottom_row
dev.off()
knitr::include_graphics("plots/zla_phylo.png")
knitr::include_graphics("plots/phoneme_effects_zla.png")
