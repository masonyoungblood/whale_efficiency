readxl::read_xlsx("data/datasets.xlsx")
datasets <- readxl::read_xlsx("data/datasets.xlsx")
nrow(datasets)
which(datasets$Open == "Yes")
which(datasets$Open == "Yes")
which(datasets$Used == "Yes")
which(datasets$Open == "Yes")
length(which(datasets$Open == "Yes"))
which(datasets$Acquired == "Yes")
which(datasets$Acquired == "Yes" & datasets$Open == "No")
which(datasets$Acquired == "Yes")
length(which(datasets$Acquired == "Yes"))
length(which(datasets$Acquired == "Yes"))
length(which(datasets$Acquired == "Used"))
length(which(datasets$Used == "Yes"))
length(which(datasets$Acquired == "Yes")) - length(which(datasets$Used == "Yes"))
Cetacean vocal sequences have different names in different species (e.g. songs, codas, burst-pulses), and there is significant variation in research effort across taxa, so I used a mixture of different strategies to compile a convenience sample of candidate datasets. For heavily studied species I was able to find papers by using species-specific search term combinations like {"humpback whale" AND "song sequences"} and {"sperm whale" AND "codas"} on Google Scholar. For less represented taxa, like dolphins and porpoises, I also searched for datasets directly on repositories like Dryad, Zenodo, and Figshare. In total, I found `r nrow(datasets)` studies that reported the durations of elements, or the intervals between elements, within vocal sequences. `r length(which(datasets$Open == "Yes"))` of these had open data. I emailed the corresponding authors of the remaining studies and was granted access to `r which(datasets$Acquired == "Yes" & datasets$Open == "No")` closed datasets. `r length(which(datasets$Acquired == "Yes")) - length(which(datasets$Used == "Yes"))` of the acquired datasets could not be included in the main analysis due to low sample size (i.e. two sequences) or because they were the wrong level of analysis (e.g. phrases within songs rather than elements within phrases). The final `r length(which(datasets$Used == "Yes"))` datasets can be seen in Table [REF].
#BOTTLENOSE DOLPHINS
bottlenose_fernandez_betelu_2023 <- read.csv("data/bottlenose_fernandez_betelu_2023.csv")
bottlenose_fernandez_betelu_2023$Sound.type
bottlenose_fernandez_betelu_2023$Comments
bottlenose_fernandez_betelu_2023$STfile
library(lme4)
sessionInfo()
?pool
?mice::pool
datasets <- readxl::read_xlsx("data/datasets.xlsx")
which(datasets$Used == "Yes")
datasets[which(datasets$Used == "Yes"), ]
datasets[which(datasets$Used == "Yes"), 6:10]
datasets[which(datasets$Used == "Yes"), 6:10]
table_data <- datasets[which(datasets$Used == "Yes"), 6:10]
#load libraries
library(flextable)
#load libraries
library(flextable)
library(dplyr)
table_data <- datasets[which(datasets$Used == "Yes"), 6:10]
#order by species
order(table_data$Species)
#order by species
table_data[order(table_data$Species), ]
#order by species
table_data <- table_data[order(table_data$Species), ]
#store data to print
table_data <- datasets[which(datasets$Used == "Yes"), 6:10]
#order by species
table_data <- table_data[order(table_data$Species), ]
table_data
?flextable::merge_v
#print table
flex_table <- flextable(table_data) %>%
merge_v(j = 1) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The estimated effect of count on each measure of production cost, using the syllable classifications from each level of deep split. 95% credible intervals that do not overlap with 0 are marked with an asterisk.")
flex_table
?igraph::cluster_leiden
load("/Users/masonyoungblood/Documents/Work/Fall 2023/BayesFlow Exploring/data.RData")
data
data[data$year == 2007 & data$gender == "W"]
data$time[data[data$year == 2007 & data$gender == "W"]]
data$time[data$year == 2007 & data$gender == "W"]
min(data$time[data$year == 2007 & data$gender == "W"])
min(data$time[data$year == 2019 & data$gender == "W"])
23.01-7.1
min(data$time[data$year == 2007 & data$gender == "M"])
min(data$time[data$year == 2019 & data$gender == "M"])
15.4-5.5
mean(data$time[data$year == 2007])
mean(data$time[data$year == 2019])
results_0 <- readRDS("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/hpcc_output/_rslurm_full_model/results_0.RDS")
results_1 <- readRDS("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/hpcc_output/_rslurm_full_model/results_1.RDS")
full_model <- c(results_0, results_1)
length(full_model)
load("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel/data/conf_model.RData")
save(full_model, file = "/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel/data/full_model.RData")
full_model[[1]]
conf_model[[1]]
str(conf_model[[1]])
str(full_model[[1]])
length(conf_model)
length(full_model)
save(conf_model, file = "/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel/data/conf_model.RData")
rm(list = ls())
results_0 <- readRDS("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/hpcc_output/_rslurm_net_model/results_0.RDS")
results_1 <- readRDS("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/hpcc_output/_rslurm_net_model/results_1.RDS")
net_model <- c(results_0, results_1)
save(net_model, file = "/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/ConservatismModel/data/net_model.RData")
results_0 <- readRDS("/Users/masonyoungblood/Documents/Work/Fall 2022/Conservatism/hpcc_output/_rslurm_disrupt_model/results_0.RDS")
results_0[[1]]
results_0[[2]]
results_0[[3]]
results_0[[6]]
results_0[[31]]
load("/Users/masonyoungblood/Documents/Work/Spring 2024/Whale ZLA/whale_song_efficiency/docs/data/processed/killer_data.RData")
killer_data
write.csv(killer_data, "killer_whale_data.csv")
install.packages("ncdf4")
ncdf4::nc_open("/Users/masonyoungblood/Downloads/DataSheet2_Acoustic presence and vocal repertoire of bowhead whales (Balaena mysticetus) in eastern and central Fram Strait/Supplementary_Material_Thomisch_etal_Vocal behaviour of bowhead whales in eastern Fram Strait_call_library_Framnb.nc")
test <- ncdf4::nc_open("/Users/masonyoungblood/Downloads/DataSheet2_Acoustic presence and vocal repertoire of bowhead whales (Balaena mysticetus) in eastern and central Fram Strait/Supplementary_Material_Thomisch_etal_Vocal behaviour of bowhead whales in eastern Fram Strait_call_library_Framnb.nc")
test$groups
test$fqgn2Rindex
test$dim
test$var
test
load("models/phylo_signal.RData")
phylo_signal
phylo_signal$K
round(phylo_signal$K, 2)
phylo_signal$P
#get average variance inflation factor from the full models across all species
vifs <- c(car::vif(sperm_models$actual$full),
car::vif(humpback_models$actual$full),
car::vif(fin_models$actual$full),
car::vif(killer_models$actual$full),
car::vif(blue_models$actual$full),
car::vif(minke_models$actual$full),
car::vif(bowhead_models$actual$full),
car::vif(right_models$actual$full),
car::vif(narrow_models$actual$full),
car::vif(rissos_models$actual$full),
car::vif(bottlenose_models$actual$full),
car::vif(heavisides_models$actual$full),
car::vif(commersons_models$actual$full),
car::vif(peales_models$actual$full),
car::vif(hectors_models$actual$full),
car::vif(sei_models$actual$full))
#load datasets
load("data/processed/sperm_data.RData")
load("data/processed/humpback_data.RData")
load("data/processed/humpback_phrase_data.RData")
load("data/processed/fin_data.RData")
load("data/processed/killer_data.RData")
load("data/processed/killer_sequence_data.RData")
load("data/processed/blue_data.RData")
load("data/processed/minke_data.RData")
load("data/processed/bowhead_data.RData")
load("data/processed/right_data.RData")
load("data/processed/narrow_data.RData")
load("data/processed/bottlenose_data.RData")
load("data/processed/rissos_data.RData")
load("data/processed/heavisides_data.RData")
load("data/processed/commersons_data.RData")
load("data/processed/peales_data.RData")
load("data/processed/hectors_data.RData")
load("data/processed/sei_data.RData")
#load fitted models
load("models/sperm_models.RData")
load("models/humpback_models.RData")
load("models/fin_models.RData")
load("models/killer_models.RData")
load("models/blue_models.RData")
load("models/minke_models.RData")
load("models/bowhead_models.RData")
load("models/right_models.RData")
load("models/narrow_models.RData")
load("models/rissos_models.RData")
load("models/bottlenose_models.RData")
load("models/heavisides_models.RData")
load("models/commersons_models.RData")
load("models/peales_models.RData")
load("models/hectors_models.RData")
load("models/sei_models.RData")
load("models/all_species_model.RData")
#get average variance inflation factor from the full models across all species
vifs <- c(car::vif(sperm_models$actual$full),
car::vif(humpback_models$actual$full),
car::vif(fin_models$actual$full),
car::vif(killer_models$actual$full),
car::vif(blue_models$actual$full),
car::vif(minke_models$actual$full),
car::vif(bowhead_models$actual$full),
car::vif(right_models$actual$full),
car::vif(narrow_models$actual$full),
car::vif(rissos_models$actual$full),
car::vif(bottlenose_models$actual$full),
car::vif(heavisides_models$actual$full),
car::vif(commersons_models$actual$full),
car::vif(peales_models$actual$full),
car::vif(hectors_models$actual$full),
car::vif(sei_models$actual$full))
car::vif(sperm_models$actual$full)
car::vif(killer_models$actual$full)
car::vif(blue_models$actual$full)
killer_models
killer_models$actual$full
killer_models <- menz_fit(killer_data)
source("functions.R")
killer_models <- menz_fit(killer_data)
killer_models
car::vif(killer_models$actual$full)
killer_models$actual$full
blue_models$actual$full
killer_data
#get average variance inflation factor from the full models across all species
vifs <- c(car::vif(sperm_models$actual$full),
car::vif(humpback_models$actual$full),
car::vif(fin_models$actual$full),
#car::vif(killer_models$actual$full),
car::vif(blue_models$actual$full),
car::vif(minke_models$actual$full),
car::vif(bowhead_models$actual$full),
car::vif(right_models$actual$full),
car::vif(narrow_models$actual$full),
car::vif(rissos_models$actual$full),
car::vif(bottlenose_models$actual$full),
car::vif(heavisides_models$actual$full),
car::vif(commersons_models$actual$full),
car::vif(peales_models$actual$full),
car::vif(hectors_models$actual$full),
car::vif(sei_models$actual$full))
#get average variance inflation factor from the full models across all species
vifs <- c(car::vif(sperm_models$actual$full),
car::vif(humpback_models$actual$full),
car::vif(fin_models$actual$full),
#car::vif(killer_models$actual$full), #throws error during model fitting, another reason to drop
car::vif(blue_models$actual$full),
car::vif(minke_models$actual$full),
car::vif(bowhead_models$actual$full),
car::vif(right_models$actual$full),
car::vif(narrow_models$actual$full),
car::vif(rissos_models$actual$full),
car::vif(bottlenose_models$actual$full),
car::vif(heavisides_models$actual$full),
car::vif(commersons_models$actual$full),
car::vif(peales_models$actual$full),
car::vif(hectors_models$actual$full),
car::vif(sei_models$actual$full))
mean(vifs)
all_species_model
confing(all_species_model$position)
confint(all_species_model$position)
AIC(all_species_model$base)
AIC(all_species_model$base) - AIC(all_species_model$position)
diff(AIC(all_species_model$base) - AIC(all_species_model$position))
dist(AIC(all_species_model$base) - AIC(all_species_model$position))
abs(AIC(all_species_model$base) - AIC(all_species_model$position))
round(abs(AIC(all_species_model$base) - AIC(all_species_model$position)), 0)
round(abs(AIC(all_species_model$base) - AIC(all_species_model$position)), 0)
#set working directory, load sheet of datasets used, and source modeling functions
setwd("~/Documents/Work/Spring 2024/Whale ZLA/whale_song_efficiency/docs")
datasets <- readxl::read_xlsx("data/datasets.xlsx")
source("functions.R")
#load datasets
files <- list.files("data/processed/")[grep(".RData", list.files("data/processed/"))]
for(i in 1:length(files)){load(paste0("data/processed/", files[i]))}
#store labels for each dataset (from phylo plot)
data_sizes <- lapply(list(sperm_data, humpback_data, humpback_phrase_data, fin_data, killer_data, killer_sequence_data, blue_data, minke_data, bowhead_data, right_data, narrow_data, rissos_data, bottlenose_data, heavisides_data, commersons_data, peales_data, hectors_data, sei_data), label_maker)
#get number of elements and intervals, sequences, and studies
n_elements <- sum(sapply(data_sizes, function(x){as.numeric(gsub(",", "", gsub(" Elements.*", "", x)))})) #number of elements and intervals
n_sequences <- sum(sapply(data_sizes, function(x){as.numeric(gsub(",", "", gsub(".*Elements\n", "", gsub(" Sequences.*", "", x))))})) #number of sequences
n_studies <- sum(sapply(data_sizes, function(x){as.numeric(as.numeric(gsub(" Stud.*", "", gsub(".*Sequences\n", "", x))))})) #number of studies
#load fitted models
files <- list.files("models/")[grep(".RData", list.files("models/"))]
for(i in 1:length(files)){load(paste0("models/", files[i]))}
#get average variance inflation factor from the full models across all species
vifs <- c(car::vif(sperm_models$actual$full),
car::vif(humpback_models$actual$full),
car::vif(fin_models$actual$full),
#car::vif(killer_models$actual$full), #throws error during model fitting, another reason to drop
car::vif(blue_models$actual$full),
car::vif(minke_models$actual$full),
car::vif(bowhead_models$actual$full),
car::vif(right_models$actual$full),
car::vif(narrow_models$actual$full),
car::vif(rissos_models$actual$full),
car::vif(bottlenose_models$actual$full),
car::vif(heavisides_models$actual$full),
car::vif(commersons_models$actual$full),
car::vif(peales_models$actual$full),
car::vif(hectors_models$actual$full),
car::vif(sei_models$actual$full))
mean(vifs)
datasets
#load libraries
library(flextable)
#load libraries
library(flextable)
library(dplyr)
library(ftExtra)
library(officer)
table_data
str(datasets)
#store data to print
table_data <- datasets[which(datasets$Used == "Yes"), c(5, 6, 7, 8, 1, 10, 11)]
#order by group and then by species
table_data <- table_data[with(table_data, order(Group, Species)), ]
#restructure references
table_data$Zotero <- paste0(table_data$Dataset, paste0(" [@", table_data$Zotero, "]"))
colnames(table_data)[which(colnames(table_data) == "Zotero")] <- "Source"
table_data <- table_data[, -which(colnames(table_data) == "Dataset")]
#store data to print
table_data <- datasets[which(datasets$Used == "Yes"), c(5, 6, 7, 8, 1, 10, 11)]
#order by group and then by species
table_data <- table_data[with(table_data, order(Group, Species)), ]
#restructure references
table_data$Zotero <- paste0(table_data$Dataset, paste0(" [@", table_data$Zotero, "]"))
colnames(table_data)[which(colnames(table_data) == "Zotero")] <- "Source"
table_data <- table_data[, -which(colnames(table_data) == "Dataset")]
#print table
flex_table <- flextable(table_data) %>%
merge_v(j = 1) %>% merge_v(j = 2) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The datasets included in this analysis, with whether they are open access, the vocalization category, and whether the sequences are comprised of element durations or inter-element intervals.", autonum = run_autonum(seq_id = "tab", bkm = "table-datasets")) %>%
colformat_md()
#print table
flex_table <- flextable(table_data) %>%
merge_v(j = 1) %>% merge_v(j = 2) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The datasets included in this analysis, with whether they are open access, the vocalization category, and whether the sequences are comprised of element durations or inter-element intervals.", autonum = run_autonum(seq_id = "tab", bkm = "table-datasets")) %>%
colformat_md()
flex_table
knitr::is_html_output()
unlink("Documents/Work/Spring 2024/Whale ZLA/whale_efficiency/docs/index_cache", recursive = TRUE)
install.packages("bookdown")
?knitr::opts_chunk
knitr::opts_chunk$get()
knitr::opts_chunk$get()$echio
knitr::opts_chunk$get()$echo
knitr::opts_chunk$get()$echo
knitr::opts_chunk$get()$echo
knitr::opts_chunk$get()$echo
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$get()$echo
knitr::opts_chunk$get()$echo
?bookdown::word_document2
#set working directory, load sheet of datasets used, and source modeling functions
setwd("~/Documents/Work/Spring 2024/Whale ZLA/whale_efficiency/docs")
datasets <- readxl::read_xlsx("data/datasets.xlsx")
source("functions.R")
#load datasets
files <- list.files("data/processed/")[grep(".RData", list.files("data/processed/"))]
for(i in 1:length(files)){load(paste0("data/processed/", files[i]))}
#store labels for each dataset (from phylo plot)
data_sizes <- lapply(list(sperm_data, humpback_data, humpback_phrase_data, fin_data, killer_data, killer_sequence_data, blue_data, minke_data, bowhead_data, right_data, narrow_data, rissos_data, bottlenose_data, heavisides_data, commersons_data, peales_data, hectors_data, sei_data), label_maker)
#get number of elements and intervals, sequences, and studies
n_elements <- sum(sapply(data_sizes, function(x){as.numeric(gsub(",", "", gsub(" Elements.*", "", x)))})) #number of elements and intervals
n_sequences <- sum(sapply(data_sizes, function(x){as.numeric(gsub(",", "", gsub(".*Elements\n", "", gsub(" Sequences.*", "", x))))})) #number of sequences
n_studies <- sum(sapply(data_sizes, function(x){as.numeric(as.numeric(gsub(" Stud.*", "", gsub(".*Sequences\n", "", x))))})) #number of studies
knitr::include_graphics("plots/spectrograms.png")
#load libraries
library(flextable)
library(dplyr)
library(ftExtra)
library(officer)
#store data to print
table_data <- datasets[which(datasets$Used == "Yes"), c(5, 6, 7, 8, 1, 10, 11)]
#order by group and then by species
table_data <- table_data[with(table_data, order(Group, Species)), ]
#restructure references
table_data$Zotero <- paste0(table_data$Dataset, paste0(" [@", table_data$Zotero, "]"))
colnames(table_data)[which(colnames(table_data) == "Zotero")] <- "Source"
table_data <- table_data[, -which(colnames(table_data) == "Dataset")]
#print table
flex_table <- flextable(table_data) %>%
merge_v(j = 1) %>% merge_v(j = 2) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The datasets included in this analysis, with whether they are open access, the vocalization category, and whether the sequences are comprised of element durations or inter-element intervals.", autonum = run_autonum(seq_id = "tab", bkm = "table-datasets")) %>%
colformat_md()
flex_table
blue_data
blue_data$duration
do.call(rbind, humpback_data)
humpback_data
humpback_data$duration
durations <- c(scale(blue_data$duration), scale(bowhead_data$duration), scale(humpback_data$duration), scale(right_data$duration), scale(sei_data$duration), scale(killer_data$duration))
intervals <- c(scale(fin_data$wood_2022$duration), scale(fin_data$best_2022$duration), scale(fin_data$romagosa_2024$duration), scale(minke_data$duration), scale(bottlenose_data$duration), scale(commersons_data$duration), scale(heavisides_data$duration), scale(hectors_data$duration), scale(narrow_data$duration), scale(peales_data$duration), scale(rissos_data$duration), scale(sperm_data$gero_2016), scale(sperm_data$hersh_2022), scale(sperm_data$vachon_2022))
plot(density(durations))
hist(durations)
hist(intervals)
hist(intervals, breaks = 100)
hist(durations, breaks = 100)
hist(durations, breaks = 20)
plot(density(durations))
plot(density(durations), bw = "nrdo")
plot(density(durations), bw = 1)
?density
plot(density(durations, bw = "SJ"))
plot(density(durations, adjust = 1))
plot(density(durations, adjust = 10))
plot(density(durations, adjust = 5))
plot(density(durations, adjust = 2))
plot(density(durations, adjust = 3))
plot(density(durations, adjust = 4))
plot(density(intervals, adjust = 4))
plot(density(durations, adjust = 4))
plot(density(intervals, adjust = 4))
plot(density(durations, adjust = 4))
plot(density(intervals, adjust = 4))
plot(density(durations, adjust = 5))
plot(density(intervals, adjust = 5))
durations <- c(scale(blue_data$duration), scale(bowhead_data$duration), scale(humpback_data$duration), scale(right_data$duration), scale(sei_data$duration), scale(killer_data$duration))
intervals <- c(scale(fin_data$wood_2022$duration), scale(fin_data$best_2022$duration), scale(fin_data$romagosa_2024$duration), scale(minke_data$duration), scale(bottlenose_data$duration), scale(commersons_data$duration), scale(heavisides_data$duration), scale(hectors_data$duration), scale(narrow_data$duration), scale(peales_data$duration), scale(rissos_data$duration), scale(sperm_data$gero_2016), scale(sperm_data$hersh_2022), scale(sperm_data$vachon_2022))
durations_density <- density(durations, adjust = 5, n = 1000)
intervals_density <- density(intervals, adjust = 5, n = 1000)
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y))
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), group = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) + geom_line()
durations_density <- density(durations, adjust = 4, n = 1000)
intervals_density <- density(intervals, adjust = 4, n = 1000)
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), group = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) + geom_line()
durations_density <- density(durations, adjust = 3, n = 1000)
intervals_density <- density(intervals, adjust = 3, n = 1000)
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), group = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) + geom_line()
durations_density <- density(durations, adjust = 1, n = 1000)
intervals_density <- density(intervals, adjust = 1, n = 1000)
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), group = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) + geom_line()
durations_density <- density(durations, adjust = 3, n = 1000)
intervals_density <- density(intervals, adjust = 3, n = 1000)
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), group = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) + geom_line()
durations <- c(scale(blue_data$duration), scale(bowhead_data$duration), scale(humpback_data$duration), scale(right_data$duration), scale(sei_data$duration), scale(killer_data$duration))
intervals <- c(scale(fin_data$wood_2022$duration), scale(fin_data$best_2022$duration), scale(fin_data$romagosa_2024$duration), scale(minke_data$duration), scale(bottlenose_data$duration), scale(commersons_data$duration), scale(heavisides_data$duration), scale(hectors_data$duration), scale(narrow_data$duration), scale(peales_data$duration), scale(rissos_data$duration), scale(sperm_data$gero_2016), scale(sperm_data$hersh_2022), scale(sperm_data$vachon_2022))
durations <- (durations - min(durations))/(max(durations) - min(durations))
intervals <- (intervals - min(intervals))/(max(intervals) - min(intervals))
durations_density <- density(durations, adjust = 3, n = 1000)
intervals_density <- density(intervals, adjust = 3, n = 1000)
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), group = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) + geom_line()
durations <- c(scale(blue_data$duration), scale(bowhead_data$duration), scale(humpback_data$duration), scale(right_data$duration), scale(sei_data$duration), scale(killer_data$duration))
intervals <- c(scale(fin_data$wood_2022$duration), scale(fin_data$best_2022$duration), scale(fin_data$romagosa_2024$duration), scale(minke_data$duration), scale(bottlenose_data$duration), scale(commersons_data$duration), scale(heavisides_data$duration), scale(hectors_data$duration), scale(narrow_data$duration), scale(peales_data$duration), scale(rissos_data$duration), scale(sperm_data$gero_2016), scale(sperm_data$hersh_2022), scale(sperm_data$vachon_2022))
#durations <- (durations - min(durations))/(max(durations) - min(durations))
#intervals <- (intervals - min(intervals))/(max(intervals) - min(intervals))
durations_density <- density(durations, adjust = 3, n = 1000)
intervals_density <- density(intervals, adjust = 3, n = 1000)
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), group = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) + geom_line()
ggplot(plot_data, aes(x = x, y = y, color = group)) + geom_line() + theme_linedraw(base_size = 8, base_family = "Avenir Next")
ggplot(plot_data, aes(x = x, y = y, color = group)) +
geom_line() +
scale_x_continuous(limits = c(-2, 5)) +
theme_linedraw(base_size = 8, base_family = "Avenir")
ggplot(plot_data, aes(x = x, y = y, color = group)) +
geom_line() +
scale_x_continuous(limits = c(-3, 5)) +
theme_linedraw(base_size = 8, base_family = "Avenir")
ggplot(plot_data, aes(x = x, y = y, color = group)) +
geom_line() +
scale_x_continuous(limits = c(-2.5, 5)) +
theme_linedraw(base_size = 8, base_family = "Avenir")
ggplot(plot_data, aes(x = x, y = y, color = group)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
theme_linedraw(base_size = 8, base_family = "Avenir")
#get densities
durations_density <- density(durations, adjust = 4, n = 1000)
intervals_density <- density(intervals, adjust = 4, n = 1000)
#combine for plotting
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), Type = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
theme_linedraw(base_size = 8, base_family = "Avenir")
#get densities
durations_density <- density(durations, adjust = 4, n = 1000)
intervals_density <- density(intervals, adjust = 4, n = 1000)
#combine for plotting
plot_data <- data.frame(x = c(durations_density$x, intervals_density$x), y = c(durations_density$y, intervals_density$y), Type = rep(c("Durations", "Intervals"), each = 1000))
ggplot(plot_data, aes(x = x, y = y, color = group)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
theme_linedraw(base_size = 8, base_family = "Avenir")
ggplot(plot_data, aes(x = x, y = y, color = Type)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
theme_linedraw(base_size = 8, base_family = "Avenir")
ggplot(plot_data, aes(x = x, y = y, color = Type)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
scale_color_manual(values = c("#638ccc", "#ca5670")) +
theme_linedraw(base_size = 8, base_family = "Avenir")
png("plots/density.png", width = 4, height = 3, units = "in", res = 600)
ggplot(plot_data, aes(x = x, y = y, color = Type)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
scale_color_manual(values = c("#638ccc", "#ca5670")) +
theme_linedraw(base_size = 8, base_family = "Avenir")
dev.off()
png("plots/density.png", width = 4, height = 4, units = "in", res = 600)
ggplot(plot_data, aes(x = x, y = y, color = Type)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
scale_color_manual(values = c("#638ccc", "#ca5670")) +
theme_linedraw(base_size = 8, base_family = "Avenir")
dev.off()
png("plots/density.png", width = 4, height = 2, units = "in", res = 600)
ggplot(plot_data, aes(x = x, y = y, color = Type)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
scale_color_manual(values = c("#638ccc", "#ca5670")) +
theme_linedraw(base_size = 8, base_family = "Avenir")
dev.off()
#plot and save
png("plots/density.png", width = 4, height = 3, units = "in", res = 600)
ggplot(plot_data, aes(x = x, y = y, color = Type)) +
geom_line() +
ylab("Density") +
scale_x_continuous(name = "z-Scored Measure", limits = c(-2.5, 5)) +
scale_color_manual(values = c("#638ccc", "#ca5670")) +
theme_linedraw(base_size = 8, base_family = "Avenir")
dev.off()
