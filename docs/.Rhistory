base = lm(scale(log(duration)) ~ scale(log(length)), data = cf_data),
noise = lm(scale(log(duration)) ~ scale(log(length)) + scale(noise) + scale(log(length)):scale(noise), data = cf_data[which(!is.na(cf_data$noise)), ]),
urban = lm(scale(log(duration)) ~ scale(log(length)) + urban + scale(log(length)):urban, data = cf_data),
simple_duration = lm(scale(duration) ~ scale(noise), data = cf_data),
simple_length = lm(scale(length) ~ scale(noise), data = cf_data)
))
#construct tables for main models, run at the token and type level
pt_token_noise <- table_construction(token_effects$pied_tamarin$noise, vars = c("length", "noise", "length:noise"))
pt_sequence_noise <- table_construction(sequence_effects$pied_tamarin$noise, vars = c("length", "noise", "length:noise"))
wc_token_noise <- table_construction(token_effects$white_crowned_sparrow$noise, vars = c("length", "noise", "length:noise"))
wc_sequence_noise <- table_construction(sequence_effects$white_crowned_sparrow$noise, vars = c("length", "noise", "length:noise"))
wc_token_urban <- table_construction(token_effects$white_crowned_sparrow$urban, vars = c("length", "urban", "length:urban"))
wc_sequence_urban <- table_construction(sequence_effects$white_crowned_sparrow$urban, vars = c("length", "urban", "length:urban"))
cf_sequence_noise <- table_construction(sequence_effects$chaffinch$noise, vars = c("length", "noise", "length:noise"))
cf_sequence_urban <- table_construction(sequence_effects$chaffinch$urban, vars = c("length", "urban", "length:urban"))
flextable(cf_sequence_noise) %>%
set_caption("Sequence-level analysis of chaffinch data, with noise level as a continuous predictor. Lower and upper mark the bounds of the 95% confidence intervals, where intervals on either side of zero denote significant effects (marked with an asterisk).", autonum = run_autonum(seq_id = "tab", bkm = "table-datasets")) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit")
flextable(cf_sequence_urban) %>%
set_caption("Sequence-level analysis of chaffinch data, with urbanization as a binary predictor. Lower and upper mark the bounds of the 95% confidence intervals, where intervals on either side of zero denote significant effects (marked with an asterisk).", autonum = run_autonum(seq_id = "tab", bkm = "table-datasets")) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit")
#load libraries
library(ggplot2)
#set working directory
setwd("~/Documents/Work/Fall 2024/Anthropogenic Noise")
#img_coords: x, y, height
menz_plot <- function(data, intercept, effect, bounds, color = "black", alpha = 1, effects_panel = 0.2, img_coords, img_name, already_averaged = FALSE){
#get image from phylopic
uuid <- get_uuid(name = img_name)
img <- get_phylopic(uuid = uuid)
#restructure data to average within sequences
if(!already_averaged){
data <- data.frame(seq_id = unique(data$seq_id),
duration = aggregate(duration ~ seq_id, data, mean)$duration,
length = aggregate(length ~ seq_id, data, mean)$length)
}
#get original scaling from data
og_scaled_x <- scale(log(data$length))
og_scaled_y <- scale(log(data$duration))
#function that predicts durations from lengths, based on intercepts, effects, and means and sds from scaling
pred_durations <- function(intercept, effect, length, mean_log_length, sd_log_length, mean_log_dur, sd_log_dur){
return(exp((intercept + effect*((log(length) - mean_log_length)/sd_log_length))*sd_log_dur + mean_log_dur))
}
#compute best fit line for plotting
best_fit_data <- data.frame(x = seq(from = min(data$length), to = max(data$length), length.out = 1000))
best_fit_data$y <- pred_durations(intercept, effect, length = best_fit_data$x,
mean_log_length = attr(og_scaled_x, "scaled:center"), sd_log_length = attr(og_scaled_x, "scaled:scale"),
mean_log_dur = attr(og_scaled_y, "scaled:center"), sd_log_dur = attr(og_scaled_y, "scaled:scale"))
#construct base plot
base_plot <- ggplot(data, aes(x = length, y = duration)) +
geom_point(colour = color, size = 1, stroke = 0) +
geom_line(data = best_fit_data, aes(x = x, y = y), colour = color, linewidth = 0.5) +
theme_linedraw(base_size = 8, base_family = "Avenir") +
add_phylopic(img = img, x = img_coords[1], y = img_coords[2], height = img_coords[3], fill = color) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 6)) +
xlab("# of Elements in Sequence") + ylab("Mean Element Duration (s)")
#construct effects plot
effects_plot <- ggplot() +
geom_point(aes(x = 1, y = effect), stroke = 1, colour = color) +
geom_linerange(aes(x = 1, ymin = bounds[1], ymax = bounds[2]), colour = color) +
theme_linedraw(base_size = 8, base_family = "Avenir") +
geom_hline(yintercept = 0, lty = "dashed") +
scale_y_continuous(name = "Slope", position = "right", labels = scales::number_format(accuracy = 0.1), breaks = scales::pretty_breaks(n = 6)) +
scale_x_continuous(name = "...", breaks = c(1), labels = c("A"), limits = c(0.5, 1.5)) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "none",
axis.title.x = element_text(colour = "white"),
axis.text.x = element_text(colour = "white"))
#combine and return
return(cowplot::plot_grid(base_plot, effects_plot, rel_widths = c(1, effects_panel)))
}
menz_plot(data = pt_data,
intercept = coefficients(summary(token_effects$pied_tamarin$base))[1, 1],
effect = coefficients(summary(token_effects$pied_tamarin$base))[2, 1],
bounds = confint(token_effects$pied_tamarin$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(8.5, 0.62, 0.2), img_name = "Saguinus", color = "#0072B2")
#load libraries
library(ggplot2)
library(rphylopic)
menz_plot(data = pt_data,
intercept = coefficients(summary(token_effects$pied_tamarin$base))[1, 1],
effect = coefficients(summary(token_effects$pied_tamarin$base))[2, 1],
bounds = confint(token_effects$pied_tamarin$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(8.5, 0.62, 0.2), img_name = "Saguinus", color = "#0072B2")
menz_plot(data = cf_data,
intercept = coefficients(summary(token_effects$chaffinch$base))[1, 1],
effect = coefficients(summary(token_effects$chaffinch$base))[2, 1],
bounds = confint(token_effects$chaffinch$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(16, 0.375, 0.05), img_name = "Fringilla coelebs", color = "#D55E00", already_averaged = TRUE)
menz_plot(data = cf_data,
intercept = coefficients(summary(sequence_effects$chaffinch$base))[1, 1],
effect = coefficients(summary(sequence_effects$chaffinch$base))[2, 1],
bounds = confint(sequence_effects$chaffinch$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(16, 0.375, 0.05), img_name = "Fringilla coelebs", color = "#D55E00", already_averaged = TRUE)
menz_plot(data = cf_data,
intercept = coefficients(summary(sequence_effects$chaffinch$base))[1, 1],
effect = coefficients(summary(sequence_effects$chaffinch$base))[2, 1],
bounds = confint(sequence_effects$chaffinch$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(14, 0.2, 0.05), img_name = "Fringilla coelebs", color = "#D55E00", already_averaged = TRUE)
menz_plot(data = cf_data,
intercept = coefficients(summary(sequence_effects$chaffinch$base))[1, 1],
effect = coefficients(summary(sequence_effects$chaffinch$base))[2, 1],
bounds = confint(sequence_effects$chaffinch$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(14, 0.2, 0.02), img_name = "Fringilla coelebs", color = "#D55E00", already_averaged = TRUE)
#pied tamarin plot
png("plots/pt_plot.png", width = 6, height = 3, units = "in", res = 600)
menz_plot(data = pt_data,
intercept = coefficients(summary(token_effects$pied_tamarin$base))[1, 1],
effect = coefficients(summary(token_effects$pied_tamarin$base))[2, 1],
bounds = confint(token_effects$pied_tamarin$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(8.5, 0.62, 0.2), img_name = "Saguinus", color = "#0072B2")
dev.off()
#white crowned plot
png("plots/wc_plot.png", width = 6, height = 3, units = "in", res = 600)
menz_plot(data = wc_data,
intercept = coefficients(summary(token_effects$white_crowned_sparrow$base))[1, 1],
effect = coefficients(summary(token_effects$white_crowned_sparrow$base))[2, 1],
bounds = confint(token_effects$white_crowned_sparrow$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(16, 0.375, 0.05), img_name = "Zonotrichia leucophrys", color = "#D55E00")
dev.off()
#chaffinch plot
png("plots/cf_plot.png", width = 6, height = 3, units = "in", res = 600)
menz_plot(data = cf_data,
intercept = coefficients(summary(sequence_effects$chaffinch$base))[1, 1],
effect = coefficients(summary(sequence_effects$chaffinch$base))[2, 1],
bounds = confint(sequence_effects$chaffinch$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(14.5, 0.22, 0.02), img_name = "Fringilla coelebs", color = "#009E73", already_averaged = TRUE)
dev.off()
png("plots/cf_plot.png", width = 6, height = 3, units = "in", res = 600)
menz_plot(data = cf_data,
intercept = coefficients(summary(sequence_effects$chaffinch$base))[1, 1],
effect = coefficients(summary(sequence_effects$chaffinch$base))[2, 1],
bounds = confint(sequence_effects$chaffinch$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(15, 0.22, 0.02), img_name = "Fringilla coelebs", color = "#009E73", already_averaged = TRUE)
dev.off()
png("plots/cf_plot.png", width = 6, height = 3, units = "in", res = 600)
menz_plot(data = cf_data,
intercept = coefficients(summary(sequence_effects$chaffinch$base))[1, 1],
effect = coefficients(summary(sequence_effects$chaffinch$base))[2, 1],
bounds = confint(sequence_effects$chaffinch$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(15, 0.22, 0.03), img_name = "Fringilla coelebs", color = "#009E73", already_averaged = TRUE)
dev.off()
png("plots/cf_plot.png", width = 6, height = 3, units = "in", res = 600)
menz_plot(data = cf_data,
intercept = coefficients(summary(sequence_effects$chaffinch$base))[1, 1],
effect = coefficients(summary(sequence_effects$chaffinch$base))[2, 1],
bounds = confint(sequence_effects$chaffinch$base, parm = "scale(log(length))", method = "Wald"),
img_coords = c(15, 0.22, 0.025), img_name = "Fringilla coelebs", color = "#009E73", already_averaged = TRUE)
dev.off()
knitr::include_graphics("plots/spectrograms.png")
#load in data
data <- read.table("../data/humans_coupe_2019.csv", header = TRUE)
#load in data
data <- read.table("../data/humans_coupe_2019.csv", header = TRUE)
#run models
duration_model <- lm(scale(log(phonationtime/nsyll)) ~ scale(log(nsyll)), data)
#interval_model <- lm(scale(log((dur - phonationtime)/nsyll)) ~ scale(log(nsyll)), data) #inter-element intervals
interval_model <- lm(scale(log(dur/nsyll)) ~ scale(log(nsyll)), data) #inter-onset intervals
summary(duration_model)
summary(interval_model)
install.packages("RBBT")
remotes::install_github("paleolimbot/rbbt")
remotes::install_github("paleolimbot/rbbt", force = TRUE)
#note that several aspects of formatting aren't working properly
#incorrect formatting of special characters in table 1
#code blocks print
#abstract header looks bad
#equation labels of 7 and 8 need custom formatting
#set font to 10-point garamond in table 2
#replace indents with five spaces in table 2
#if output is a word document
if(!knitr::is_html_output()){
#hide all code
knitr::opts_chunk$set(echo = FALSE)
#set fonts of flextables
flextable::set_flextable_defaults(font.family = "Garamond", font.size = 10, padding.top = 1, padding.bottom = 1, keep_with_next = TRUE)
}
#set working directory, load sheet of datasets used, and source modeling functions
setwd("~/Documents/Work/Spring 2024/Whale ZLA/whale_efficiency/docs")
datasets <- readxl::read_xlsx("data/datasets.xlsx")
source("functions.R")
#load datasets
files <- list.files("data/processed_menz/")[grep(".RData", list.files("data/processed_menz/"))]
for(i in 1:length(files)){load(paste0("data/processed_menz/", files[i]))}
#store labels for each dataset (from phylo plot)
data_sizes <- lapply(list(sperm_data, humpback_data, humpback_phrase_data, fin_data, killer_data, killer_sequence_data, blue_data, minke_data, bowhead_data, right_data, narrow_data, rissos_data, bottlenose_data, heavisides_data, commersons_data, peales_data, hectors_data, sei_data), label_maker)
#get number of elements and intervals, sequences, and studies
n_elements <- sum(sapply(data_sizes, function(x){as.numeric(gsub(",", "", gsub(" Elements.*", "", x)))})) #number of elements and intervals
n_sequences <- sum(sapply(data_sizes, function(x){as.numeric(gsub(",", "", gsub(".*Elements\n", "", gsub(" Sequences.*", "", x))))})) #number of sequences
n_studies <- sum(sapply(data_sizes, function(x){as.numeric(as.numeric(gsub(" Stud.*", "", gsub(".*Sequences\n", "", x))))})) #number of studies
knitr::include_graphics("plots/spectrograms.png")
load("models/phylo_signal.RData")
#load fitted models
files <- list.files("models/")[grep(".RData", list.files("models/"))]
for(i in 1:length(files)){load(paste0("models/", files[i]))}
#load libraries
library(flextable)
library(dplyr)
library(ftExtra)
library(officer)
#store data to print
table_data <- datasets[which(datasets$Used == "Yes"), c(6, 7, 8, 1, 11, 12, 5)]
#order by group and then by species
table_data <- table_data[with(table_data, order(Group, Species)), ]
#print table
flex_table <- flextable(table_data) %>%
merge_v(j = 1) %>% merge_v(j = 2) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The datasets included in this analysis, with whether they are open access, the vocalization category, and whether the sequences are comprised of element durations or inter-onset intervals. All datasets were appropriate for assessing Menzerath's law, and the subset that were also appropriate for Zipf's law of abbreviation are denoted in the final column.", autonum = run_autonum(seq_id = "tab", bkm = "table-datasets")) %>%
colformat_md()
flex_table
knitr::include_graphics("plots/myst_phylo.png")
knitr::include_graphics("plots/odon_phylo.png")
knitr::include_graphics("plots/word_level_effects.png")
#load packages
library(flextable)
library(dplyr)
#construct table
table <- confint(all_species_model$position, method = "Wald")
table <- as.data.frame(table)
table <- round(table, 3)
table <- table[-c(1:4), ]
table <- cbind(round(fixef(all_species_model$position)[-1], 3), table)
table <- cbind(table, sapply(1:nrow(table), function(x){ifelse(table[x, 2]*table[x, 3] > 0, "*", "")}))
table <- table[c(1, 3, 4, 2, 5, 6), ]
table <- cbind(c("Length", "\t: Group", "\t: Type", "Position", "\t: Group", "\t: Type"), table)
colnames(table) <- c("Predictor", "Effect", "2.5%", "97.5%", " ")
rownames(table) <- NULL
#print table
flextable(table, col_keys = colnames(table)) %>%
theme_vanilla() %>%
set_table_properties(layout = "autofit") %>%
set_caption("The estimated effect of each predictor and interaction (indented and marked with :) on element durations and inter-onset intervals in sequences. Length is the sequence length (in number of elements or intervals), position is the normalized position of each element or interval in the sequence, group is whether the species is a baleen (0) or toothed (1) whale, and type is whether the data are comprised of element durations (0) or inter-onset intervals (1). 2.5% and 97.5% denote the lower and upper bounds of the 95% confidence intervals. Asterisks mark 95% CIs that do not overlap zero, interpreted here as evidence for a strong effect.")
#load files for zla models
files <- list.files("data/processed_zla/")[grep(".RData", list.files("data/processed_zla/"))]
for(i in 1:length(files)){load(paste0("data/processed_zla/", files[i]))}
#load libraries and data
library(ggtree)
cetaceans <- ape::read.tree("data/phylo_lloyd_2021.tre")
#create table of tips
zla_tips <- data.frame(scientific = c("Megaptera_novaeangliae", #humpback
"Balaenoptera_musculus", #blue
"Balaena_mysticetus", #bowhead
"Orcinus_orca", #killer
"Balaenoptera_borealis"), #sei whale
common = c("Humpback Whale\n(Megaptera novaeangliae)",
"Blue Whale\n(Balaenoptera musculus)",
"Bowhead Whale\n(Balaena mysticetus)",
"Killer Whale\n(Orcinus orca)",
"Sei Whale\n(Balaenoptera borealis)"),
img = c("humpback", "blue", "bowhead", "killer", "sei"))
#subset the original phylogeny to only include the relevant species
cetaceans <- ape::keep.tip(cetaceans, zla_tips$scientific)
#match up the tip labels with the image files
cetaceans$tip.label <- zla_tips$common[match(cetaceans$tip.label, zla_tips$scientific)]
cetaceans$file <- paste0("imgs/", zla_tips$img[match(cetaceans$tip.label, zla_tips$common)], ".svg")
#construct un-annotated phylogeny plot for cetaceans
#colors in following order to match myst plot: blue, bowhead, humpback, killer, sei
zla_phylo_plot <- ggtree(cetaceans, branch.length = "none", layout = "roundrect")
zla_phylo_plot$data$file <- c(cetaceans$file, rep(NA, nrow(zla_phylo_plot$data) - nrow(zla_tips)))
zla_phylo_plot <- zla_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 9, size = 0.1, align = TRUE) + xlim(NA, 13.5) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = c("#5F8B99", "#BE722D", "#CD655B", "#D23DE6", "#657CE2")) + theme(legend.position = "none") + ylim(0.5, nrow(zla_tips))
#create plot labels
zla_labels <- c(zla_label_maker(killer_data),
zla_label_maker(bowhead_data),
zla_label_maker(humpback_data),
zla_label_maker(sei_data),
zla_label_maker(blue_data))
#add annotations to mysticetes
zla_phylo_plot <- zla_phylo_plot + annotate("text", label = zla_labels, x = rep(max(zla_phylo_plot$data$x), length(zla_labels)), y = (1:length(zla_labels))-0.35, hjust = 0, family = "Avenir", size = 2.2, lineheight = 0.8)
#create zipf's law plots for each species
blue_plot <- zla_plot(blue_data, zla_fit(blue_data), color = "#5F8B99", ylims = c(10, 20))
bowhead_plot <- zla_plot(bowhead_data, zla_fit(bowhead_data), color = "#BE722D")
humpback_plot <- zla_plot(humpback_data, zla_fit(humpback_data), color = "#CD655B")
killer_plot <- zla_plot(killer_data, zla_fit(killer_data), color = "#D23DE6")
sei_plot <- zla_plot(sei_data, zla_fit(sei_data), color = "#657CE2")
#create and save full phylogeny plot
png("plots/zla_phylo.png", width = 6, height = nrow(zla_tips), units = "in", res = 600)
#svglite::svglite("plots/zla_phylo.svg", width = 6, height = nrow(zla_tips))
right_panel <- cowplot::plot_grid(blue_plot, sei_plot, humpback_plot, bowhead_plot, killer_plot, NULL,
ncol = 1, rel_heights = c(rep(1, nrow(zla_tips)), 0.35))
bottom_row <- cowplot::plot_grid(zla_phylo_plot, right_panel, rel_widths = c(1, 1))
bottom_row
dev.off()
#load libraries and data
library(ggtree)
cetaceans <- ape::read.tree("data/phylo_lloyd_2021.tre")
#create table of tips
zla_tips <- data.frame(scientific = c("Megaptera_novaeangliae", #humpback
"Balaenoptera_musculus", #blue
"Balaena_mysticetus", #bowhead
"Orcinus_orca", #killer
"Balaenoptera_borealis"), #sei whale
common = c("Humpback Whale\n(Megaptera novaeangliae)",
"Blue Whale\n(Balaenoptera musculus)",
"Bowhead Whale\n(Balaena mysticetus)",
"Killer Whale\n(Orcinus orca)",
"Sei Whale\n(Balaenoptera borealis)"),
img = c("humpback", "blue", "bowhead", "killer", "sei"))
#subset the original phylogeny to only include the relevant species
cetaceans <- ape::keep.tip(cetaceans, zla_tips$scientific)
#match up the tip labels with the image files
cetaceans$tip.label <- zla_tips$common[match(cetaceans$tip.label, zla_tips$scientific)]
cetaceans$file <- paste0("imgs/", zla_tips$img[match(cetaceans$tip.label, zla_tips$common)], ".svg")
#construct un-annotated phylogeny plot for cetaceans
#colors in following order to match myst plot: blue, bowhead, humpback, killer, sei
zla_phylo_plot <- ggtree(cetaceans, branch.length = "none", layout = "roundrect")
zla_phylo_plot$data$file <- c(cetaceans$file, rep(NA, nrow(zla_phylo_plot$data) - nrow(zla_tips)))
zla_phylo_plot <- zla_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 9, size = 0.1, align = TRUE) + xlim(NA, 13.5) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = c("#5F8B99", "#BE722D", "#CD655B", "#D23DE6", "#657CE2")) + theme(legend.position = "none") + ylim(0.5, nrow(zla_tips))
#create plot labels
zla_labels <- c(zla_label_maker(killer_data),
zla_label_maker(bowhead_data),
zla_label_maker(humpback_data),
zla_label_maker(sei_data),
zla_label_maker(blue_data))
#add annotations to mysticetes
zla_phylo_plot <- zla_phylo_plot + annotate("text", label = zla_labels, x = rep(max(zla_phylo_plot$data$x), length(zla_labels)), y = (1:length(zla_labels))-0.35, hjust = 0, family = "Avenir", size = 2.2, lineheight = 0.8)
#create zipf's law plots for each species
blue_plot <- zla_plot(blue_data, zla_fit(blue_data), color = "#5F8B99", original_axes = FALSE, y_breaks = 2)
bowhead_plot <- zla_plot(bowhead_data, zla_fit(bowhead_data), color = "#BE722D", original_axes = FALSE, y_breaks = 3)
humpback_plot <- zla_plot(humpback_data, zla_fit(humpback_data), color = "#CD655B", original_axes = FALSE)
killer_plot <- zla_plot(killer_data, zla_fit(killer_data), color = "#D23DE6", original_axes = FALSE, y_breaks = 3)
sei_plot <- zla_plot(sei_data, zla_fit(sei_data), color = "#657CE2", original_axes = FALSE)
#create and save full phylogeny plot
png("plots/zla_phylo_trans.png", width = 6, height = nrow(zla_tips), units = "in", res = 600)
right_panel <- cowplot::plot_grid(blue_plot, sei_plot, humpback_plot, bowhead_plot, killer_plot, NULL,
ncol = 1, rel_heights = c(rep(1, nrow(zla_tips)), 0.35))
bottom_row <- cowplot::plot_grid(zla_phylo_plot, right_panel, rel_widths = c(1, 1))
bottom_row
dev.off()
#note that several aspects of formatting aren't working properly
#incorrect formatting of special characters in table 1
#code blocks print
#abstract header looks bad
#equation labels of 7 and 8 need custom formatting
#set font to 10-point garamond in table 2
#replace indents with five spaces in table 2
#if output is a word document
if(!knitr::is_html_output()){
#hide all code
knitr::opts_chunk$set(echo = FALSE)
#set fonts of flextables
flextable::set_flextable_defaults(font.family = "Garamond", font.size = 10, padding.top = 1, padding.bottom = 1, keep_with_next = TRUE)
}
#set working directory, load sheet of datasets used, and source modeling functions
setwd("~/Documents/Work/Spring 2024/Whale ZLA/whale_efficiency/docs")
datasets <- readxl::read_xlsx("data/datasets.xlsx")
source("functions.R")
#load datasets
files <- list.files("data/processed_menz/")[grep(".RData", list.files("data/processed_menz/"))]
for(i in 1:length(files)){load(paste0("data/processed_menz/", files[i]))}
#store labels for each dataset (from phylo plot)
data_sizes <- lapply(list(sperm_data, humpback_data, humpback_phrase_data, fin_data, killer_data, killer_sequence_data, blue_data, minke_data, bowhead_data, right_data, narrow_data, rissos_data, bottlenose_data, heavisides_data, commersons_data, peales_data, hectors_data, sei_data), label_maker)
#get number of elements and intervals, sequences, and studies
n_elements <- sum(sapply(data_sizes, function(x){as.numeric(gsub(",", "", gsub(" Elements.*", "", x)))})) #number of elements and intervals
n_sequences <- sum(sapply(data_sizes, function(x){as.numeric(gsub(",", "", gsub(".*Elements\n", "", gsub(" Sequences.*", "", x))))})) #number of sequences
n_studies <- sum(sapply(data_sizes, function(x){as.numeric(as.numeric(gsub(" Stud.*", "", gsub(".*Sequences\n", "", x))))})) #number of studies
knitr::include_graphics("plots/spectrograms.png")
load("models/phylo_signal.RData")
#load fitted models
files <- list.files("models/")[grep(".RData", list.files("models/"))]
for(i in 1:length(files)){load(paste0("models/", files[i]))}
#load libraries
library(flextable)
library(dplyr)
library(ftExtra)
library(officer)
#store data to print
table_data <- datasets[which(datasets$Used == "Yes"), c(6, 7, 8, 1, 11, 12, 5)]
#order by group and then by species
table_data <- table_data[with(table_data, order(Group, Species)), ]
#print table
flex_table <- flextable(table_data) %>%
merge_v(j = 1) %>% merge_v(j = 2) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The datasets included in this analysis, with whether they are open access, the vocalization category, and whether the sequences are comprised of element durations or inter-onset intervals. All datasets were appropriate for assessing Menzerath's law, and the subset that were also appropriate for Zipf's law of abbreviation are denoted in the final column.", autonum = run_autonum(seq_id = "tab", bkm = "table-datasets")) %>%
colformat_md()
flex_table
#load libraries and data
library(ggtree)
cetaceans <- ape::read.tree("data/phylo_lloyd_2021.tre")
#create table of mysticetes tips
myst_tips <- data.frame(scientific = c("Megaptera_novaeangliae", #humpback
"Balaenoptera_musculus", #blue
"Balaenoptera_physalus", #fin
"Balaenoptera_acutorostrata", #minke
"Balaena_mysticetus", #bowhead
"Eubalaena_japonica", #right
"Balaenoptera_borealis"), #sei whale
common = c("Humpback Whale\n(Megaptera novaeangliae)",
"Blue Whale\n(Balaenoptera musculus)",
"Fin Whale\n(Balaenoptera physalus)",
"Common Minke Whale\n(Balaenoptera acutorostrata)",
"Bowhead Whale\n(Balaena mysticetus)",
"North Pacific Right Whale\n(Eubalaena japonica)",
"Sei Whale\n(Balaenoptera borealis)"),
img = c("humpback", "blue", "fin", "minke", "bowhead", "right", "sei"))
#create table of odontocete tips
odon_tips <- data.frame(scientific = c("Physeter_macrocephalus", #sperm
"Orcinus_orca", #killer
"Neophocaena_phocaenoides", #narrow-ridged finless porpoise (replaced species name with indo-pacific finless porpoise bc does not exist in phylo)
"Grampus_griseus", #rissos dolphin
"Tursiops_truncatus", #bottlenose dolphin
"Cephalorhynchus_heavisidii", #heavisides dolphin
"Cephalorhynchus_eutropia", #commersons dolphin (replaced species name with close relative bc does not exist in phylo)
"Lagenorhynchus_albirostris", #peales dolphin (replaced species name with close relative bc does not exist in phylo)
"Cephalorhynchus_hectori"), #hectors dolphin
common = c("Sperm Whale\n(Physeter macrocephalus)",
"Killer Whale\n(Orcinus orca)",
"Narrow-Ridged Finless Porpoise\n(Neophocaena asiaeorientalis)",
"Risso's Dolphin\n(Grampus griseus)",
"Bottlenose Dolphin\n(Tursiops truncatus)",
"Heaviside's Dolphin\n(Cephalorhynchus heavisidii)",
"Commerson's Dolphin\n(Cephalorhynchus commersonii)",
"Peale's Dolphin\n(Lagenorhynchus australis)",
"Hector's Dolphin\n(Cephalorhynchus hectori)"),
img = c("sperm", "killer", "narrow", "rissos", "dolphin", "heavisides", "commersons", "peales", "hectors"))
#subset the original phylogeny to only include the relevant species
mysticetes <- ape::keep.tip(cetaceans, myst_tips$scientific)
odonticetes <- ape::keep.tip(cetaceans, odon_tips$scientific)
#match up the tip labels with the image files
mysticetes$tip.label <- myst_tips$common[match(mysticetes$tip.label, myst_tips$scientific)]
mysticetes$file <- paste0("imgs/", myst_tips$img[match(mysticetes$tip.label, myst_tips$common)], ".svg")
odonticetes$tip.label <- odon_tips$common[match(odonticetes$tip.label, odon_tips$scientific)]
odonticetes$file <- paste0("imgs/", odon_tips$img[match(odonticetes$tip.label, odon_tips$common)], ".svg")
#generate colors for each species
colors <- hues::iwanthue(nrow(myst_tips)+nrow(odon_tips), hmin = 0, hmax = 360, cmin = 0, cmax = 180, lmin = 50, lmax = 60)
#hues::iwanthue(nrow(myst_tips)+nrow(odon_tips), hmin = 0, hmax = 360, cmin = 30, cmax = 80, lmin = 35, lmax = 80)
#set.seed(12)
set.seed(3)
#set.seed(12345)
#set.seed(123)
#set.seed(1234)
colors <- colors[sample(1:(nrow(myst_tips)+nrow(odon_tips)))]
#construct un-annotated phylogeny plot for mysticetes
myst_phylo_plot <- ggtree(mysticetes, branch.length = "none", layout = "roundrect")
myst_phylo_plot$data$file <- c(mysticetes$file, rep(NA, nrow(myst_phylo_plot$data) - nrow(myst_tips)))
myst_phylo_plot <- myst_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 9, size = 0.06, align = TRUE) + xlim(NA, 13.5) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = colors[1:nrow(myst_tips)]) + theme(legend.position = "none") + ylim(0.5, nrow(myst_tips))
#construct un-annotated phylogeny plot for odontocetes
odon_phylo_plot <- ggtree(odonticetes, branch.length = "none", layout = "roundrect")
odon_phylo_plot$data$file <- c(odonticetes$file, rep(NA, nrow(odon_phylo_plot$data) - nrow(odon_tips)))
odon_phylo_plot <- odon_phylo_plot +
geom_tiplab(aes(image = file, color = label), geom = "image", offset = 21, size = 0.05, align = TRUE) + xlim(NA, 28) +
geom_tiplab(aes(color = label), geom = "label", family = "Avenir", parse = FALSE, align = TRUE, size = 2.5) +
scale_color_manual(values = colors[(nrow(myst_tips)+1):(nrow(myst_tips)+nrow(odon_tips))]) + theme(legend.position = "none") + ylim(0.5, nrow(odon_tips))
#create plot labels for mysticetes
myst_labels <- c(label_maker(bowhead_data, intervals = TRUE),
label_maker(right_data),
label_maker(minke_data, intervals = TRUE),
label_maker(sei_data),
label_maker(blue_data),
label_maker(fin_data, intervals = TRUE),
label_maker(humpback_data))
#create plot labels for odontocetes
odon_labels <- c(label_maker(sperm_data, intervals = TRUE),
label_maker(narrow_data, intervals = TRUE),
label_maker(killer_data),
label_maker(peales_data, intervals = TRUE),
label_maker(bottlenose_data, intervals = TRUE),
label_maker(rissos_data, intervals = TRUE),
label_maker(heavisides_data, intervals = TRUE),
label_maker(commersons_data, intervals = TRUE),
label_maker(hectors_data, intervals = TRUE))
#add annotations to mysticetes
myst_phylo_plot <- myst_phylo_plot + annotate("text", label = myst_labels, x = rep(max(myst_phylo_plot$data$x), length(myst_labels)), y = (1:length(myst_labels))-0.35, hjust = 0, family = "Avenir", size = 2.2, lineheight = 0.8)
myst_phylo_plot <- myst_phylo_plot + annotate("text", label = "Baleen Whales (Mysticetes)", x = min(myst_phylo_plot$data$x)-0.65, y = myst_phylo_plot$data$y[which.min(myst_phylo_plot$data$x)], angle = 90, family = "Avenir", size = 3)
#add annotations to odontocetes
odon_phylo_plot <- odon_phylo_plot + annotate("text", label = odon_labels, x = rep(max(odon_phylo_plot$data$x), length(odon_labels)), y = (1:length(odon_labels))-0.35, hjust = 0, family = "Avenir", size = 2.2, lineheight = 0.8)
odon_phylo_plot <- odon_phylo_plot + annotate("text", label = "Toothed Whales (Odontocetes)", x = min(odon_phylo_plot$data$x)-1.4, y = odon_phylo_plot$data$y[which.min(odon_phylo_plot$data$x)], angle = 90, family = "Avenir", size = 3)
#match up the colors between phylogeny and menzerath's law plots based on the labels
color_matching <- data.frame(species = c(myst_phylo_plot$data$label[-which(is.na(myst_phylo_plot$data$label))], odon_phylo_plot$data$label[-which(is.na(odon_phylo_plot$data$label))]), color_code = colors[c(as.numeric(factor(mysticetes$tip.label)), as.numeric(factor(odonticetes$tip.label))+nrow(myst_tips))])
#create menzerath's law plots for each species
blue_plot <- menz_plot(data = blue_data, model = blue_models, color = color_matching$color_code[grep("Blue ", color_matching$species)], original_axes = FALSE, y_breaks = 3)
bowhead_plot <- menz_plot(data = bowhead_data, model = bowhead_models, intervals = TRUE, color = color_matching$color_code[grep("Bowhead ", color_matching$species)], original_axes = FALSE, y_breaks = 3)
fin_plot <- menz_plot(data = fin_data, model = fin_models, intervals = TRUE, color = color_matching$color_code[grep("Fin ", color_matching$species)], original_axes = FALSE, y_breaks = 3)
humpback_plot <- menz_plot(data = humpback_data, model = humpback_models, color = color_matching$color_code[grep("Humpback ", color_matching$species)], original_axes = FALSE, y_breaks = 3)
minke_plot <- menz_plot(data = minke_data, model = minke_models, intervals = TRUE, color = color_matching$color_code[grep("Minke ", color_matching$species)], original_axes = FALSE, y_breaks = 3)
right_plot <- menz_plot(data = right_data, model = right_models, color = color_matching$color_code[grep("Right ", color_matching$species)], original_axes = FALSE, y_breaks = 3)
sei_plot <- menz_plot(data = sei_data, model = sei_models, color = color_matching$color_code[grep("Sei ", color_matching$species)], original_axes = FALSE, y_breaks = 3)
killer_plot <- menz_plot(data = killer_data, model = killer_models, color = color_matching$color_code[grep("Killer ", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
sperm_plot <- menz_plot(data = sperm_data, model = sperm_models, intervals = TRUE, color = color_matching$color_code[grep("Sperm ", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
narrow_plot <- menz_plot(data = narrow_data, model = narrow_models, intervals = TRUE, color = color_matching$color_code[grep(" Porpoise", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
rissos_plot <- menz_plot(data = rissos_data, model = rissos_models, intervals = TRUE, color = color_matching$color_code[grep("Risso's ", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
bottlenose_plot <- menz_plot(data = bottlenose_data, model = bottlenose_models, intervals = TRUE, color = color_matching$color_code[grep("Bottlenose ", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
heavisides_plot <- menz_plot(data = heavisides_data, model = heavisides_models, intervals = TRUE, color = color_matching$color_code[grep("Heaviside's ", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
commersons_plot <- menz_plot(data = commersons_data, model = commersons_models, intervals = TRUE, color = color_matching$color_code[grep("Commerson's ", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
peales_plot <- menz_plot(data = peales_data, model = peales_models, intervals = TRUE, color = color_matching$color_code[grep("Peale's ", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
hectors_plot <- menz_plot(data = hectors_data, model = hectors_models, intervals = TRUE, color = color_matching$color_code[grep("Hector's ", color_matching$species)], effects_axis = c(-0.6, 0.4), original_axes = FALSE, y_breaks = 3)
#create and save full phylogeny plot for mysticetes
png("plots/myst_phylo_trans.png", width = 6, height = nrow(myst_tips), units = "in", res = 600)
right_panel <- cowplot::plot_grid(humpback_plot, fin_plot, blue_plot, sei_plot, minke_plot, right_plot, bowhead_plot, NULL,
ncol = 1, rel_heights = c(rep(1, nrow(myst_tips)), 0.35))
bottom_row <- cowplot::plot_grid(myst_phylo_plot, right_panel, rel_widths = c(1, 1))
bottom_row
dev.off()
#create and save full phylogeny plot for odontocetes
png("plots/odon_phylo_trans.png", width = 6, height = nrow(odon_tips), units = "in", res = 600)
right_panel <- cowplot::plot_grid(hectors_plot, commersons_plot, heavisides_plot, rissos_plot, bottlenose_plot, peales_plot, killer_plot, narrow_plot, sperm_plot, NULL,
ncol = 1, rel_heights = c(rep(1, nrow(odon_tips)), 0.35))
bottom_row <- cowplot::plot_grid(odon_phylo_plot, right_panel, rel_widths = c(1, 1))
bottom_row
dev.off()
